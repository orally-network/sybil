type Error = variant { Ok : null; Err : text };

type Source = record {
    uri : text;
    resolver : text;
    expected_bytes : nat64;
};

type RateDataLight = record {
    symbol : text;
    rate : nat64;
    decimals : nat64;
    timestamp : nat64;
    signature : opt text;
};

type CustomPair = record {
    id : text;
    frequency : nat64;
    source : vec Source;
    data : RateDataLight;
    last_update : nat64;
};

type CreateCustomPairRequest = record {
    pair_id : text;
    frequency : nat;
    decimals : nat;
    amount : nat;
    sources : vec Source;
    msg : text;
    sig : text;
};

type Pair = record {
    id : text;
    frequency : nat64;
    last_update : nat64;
    data : RateDataLight;
};

type Cfg = record {
    exchange_rate_canister : text;
    proxy_ecdsa_canister : text;
    siwe_signer_canister : text;
    treasurer_canister : text;
    expiration_time : nat64;
    key_name : text;
    cost_per_execution : nat64;
};

type UpdateCfg = record {
    exchange_rate_canister : opt text;
    proxy_ecdsa_canister : opt text;
    siwe_signer_canister : opt text;
    treasurer_canister : opt text;
    expiration_time : opt nat64;
    key_name : opt text;
    cost_per_execution : opt nat64;
};

type GetAssetDataWithProofResponse = variant { Ok : RateDataLight; Err : text};
type GetAssetDataResponse = variant { Ok : RateDataLight; Err: text};
type AddPairResponse = variant { Ok : Pair; Err: text };
type TextResponse = variant { Ok : text; Err: text};
type GetCfgResponse = variant { Ok : Cfg; Err: text};

service : {
    create_custom_pair : (req : CreateCustomPairRequest) -> (Error);
    remove_custom_pair : (pair_id : text) -> ();
    get_custom_pairs : () -> (vec CustomPair);
    get_asset_data_with_proof : (pair_id : text) -> (GetAssetDataWithProofResponse);
    get_asset_data : (pair_id : text) -> (GetAssetDataResponse);
    is_pair_exists : (pair_id : text) -> (bool);
    add_pair : (pair_id : text, frequency : nat) -> (AddPairResponse);
    remove_pair : (pair_id : text) -> ();
    get_pairs : () -> (vec Pair);
    update_cfg : (cfg : UpdateCfg) -> (Error);
    get_cfg : () -> (GetCfgResponse);
    eth_address : () -> (TextResponse);
}