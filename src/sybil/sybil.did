type Error = variant { Ok : null; Err : text };

type Endpoint = record {
    uri : text;
    resolver : text;
    expected_bytes : nat64;
};

type RateDataLight = record {
    symbol : text;
    rate : nat64;
    decimals : nat64;
    timestamp : nat64;
    signature : opt text;
};

type CustomPair = record {
    id : text;
    frequency : nat64;
    source : Endpoint;
    data : RateDataLight;
    last_update : nat64;
};

type CreateCustomPairRequest = record {
    pair_id : text;
    frequency : nat;
    uri : text;
    resolver : text;
    amount : nat;
    msg : text;
    sig : text;
};

type Pair = record {
    id : text;
    frequency : nat64;
    last_update : nat64;
    data : RateDataLight;
};

type GetAssetDataWithProofResponse = variant { Ok : RateDataLight; Err : text};
type GetAssetDataResponse = variant { Ok : RateDataLight; Err: text};
type AddPairResponse = variant { Ok : Pair; Err: text };
type TextResponse = variant { Ok : text; Err: text};

service : {
    create_custom_pair : (req : CreateCustomPairRequest) -> (Error);
    remove_custom_pair : (pair_id : text) -> ();
    get_custom_pairs : () -> (vec CustomPair);
    get_asset_data_with_proof : (pair_id : text) -> (GetAssetDataWithProofResponse);
    get_asset_data : (pair_id : text) -> (GetAssetDataResponse);
    is_pair_exists : (pair_id : text) -> (bool);
    add_pair : (pair_id : text, frequency : nat) -> (AddPairResponse);
    remove_pair : (pair_id : text) -> ();
    get_pairs : () -> (vec Pair);
    set_exchange_rate_canister : (new_principal : text) -> ();
    get_exchange_rate_canister : () -> (text);
    set_proxy_ecdsa_canister : (new_principal : text) -> ();
    get_proxy_ecdsa_canister : () -> (text);
    set_siwe_signer_canister : (new_principal : text) -> ();
    get_siwe_signer_canister : () -> (text);
    set_expiration_time : (expiration_time : nat) -> ();
    get_expiration_time : () -> (nat);
    set_key_name : (key_name: text) -> ();
    get_key_name : () -> (text);
    set_treasurer_canister : (new_principal : text) -> ();
    get_treasurer_canister : () -> (text);
    set_cost_per_execution : (cost : nat) -> ();
    get_cost_per_execution : () -> (nat);
    eth_address : () -> (TextResponse);
    init_controllers : () -> ();
}