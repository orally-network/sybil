type RateDataLight = record {
    symbol : text;
    rate : nat64;
    decimals : nat64;
    timestamp : nat64;
    signature : opt text;
};

type Source = record {
    uri : text;
    resolver : text;
    expected_bytes : nat64;
};

type PairType = variant { Custom : vec Source; Default : null };

type PairStatus = record {
    last_update : nat64;
    updated_counter : nat64;
    requests_counter : nat64;
};

type Pair = record {
    id : text;
    pair_type : PairType;
    update_freq : nat64;
    decimals : nat64;
    status : PairStatus;
    owner : text;
};

type CreateCustomPairRequest = record {
    pair_id : text;
    update_freq : nat;
    decimals : nat;
    sources : vec Source;
    msg : text;
    sig : text;
};

type CreateDefaultPairRequest = record {
    pair_id : text;
    update_freq : nat;
    decimals : nat;
};

type CreateDataFetcherRequest = record {
    update_freq : nat;
    sources : vec Source;
    msg : text;
    sig : text;
};

type DataFetcher = record {
    id : nat;
    update_freq : nat;
    owner : text;
    sources : vec Source;
};

type BalancesCfg = record {
    rpc : text;
    chain_id : nat;
    erc20_contract : nat;
    fee_per_byte : nat;
};

type Cfg = record {
    exchange_rate_canister : text;
    mock : bool;
    key_name : text;
    balances_cfg : BalancesCfg;
};

type UpdateCfg = record {
    exchange_rate_canister : opt text;
    mock : opt bool;
    key_name : opt text;
    balances_cfg : opt BalancesCfg;
};

type GetAssetDataWithProofResponse = variant { Ok : RateDataLight; Err : text };
type GetAssetDataResponse = variant { Ok : RateDataLight; Err: text };
type TextResponse = variant { Ok : text; Err: text };
type NatResponse = variant { Ok : nat; Err: text };
type BoolResponse = variant { Ok : bool; Err: text };
type GetCfgResponse = variant { Ok : Cfg; Err: text };
type GetWhitelistResponse = variant { Ok : vec text; Err: text };
type Error = variant { Ok : null; Err : text };

service : {
    // custom pairs
    create_custom_pair : (req : CreateCustomPairRequest) -> (Error);
    remove_custom_pair : (id : text, msg : text, sig : text) -> (Error);
    
    // default pairs
    create_default_pair : (req : CreateDefaultPairRequest) -> (Error);
    remove_default_pair : (id : text) -> (Error);

    // assets 
    get_asset_data_with_proof : (pair_id : text) -> (GetAssetDataWithProofResponse);
    get_asset_data : (pair_id : text) -> (GetAssetDataResponse);
    is_pair_exists : (pair_id : text) -> (bool);
    get_pairs : () -> (vec Pair);

    // controllers
    update_cfg : (cfg : UpdateCfg) -> (Error);
    get_cfg : () -> (GetCfgResponse);

    // canister
    eth_address : () -> (TextResponse);

    // balances
    deposit : (tx_hash : text, msg : text, sig : text) -> (Error);
    get_balance : (address : text) -> (NatResponse);
    withdraw : (amount : nat, to : text, msg : text, sig : text) -> (TextResponse);
    withdraw_fees : (to : text) -> (TextResponse);

    // whitelist
    add_to_whitelist : (address : text) -> (Error);
    remove_from_whitelist : (address : text) -> (Error);
    is_whitelisted : (address : text) -> (BoolResponse);
    get_whitelist : () -> (GetWhitelistResponse);

    // data fetcher
    create_data_fetcher : (req : CreateDataFetcherRequest) -> (NatResponse);
    remove_data_fetcher : (id : nat, msg : text, sig : text) -> (Error);
    get_data : (id : nat) -> (TextResponse);
    get_data_fetchers : (owner : text) -> (vec DataFetcher);
}