type Source = record {
    uri : text;
    resolver : text;
    expected_bytes : opt nat64;
};

type FeedType = variant { Custom : null; CustomNumber : null; CustomString : null; Default : null };


type FeedStatus = record {
    last_update : nat64;
    updated_counter : nat64;
    requests_counter : nat64;
};

type Feed = record {
    id : text;
    feed_type : FeedType;
    update_freq : nat64;
    sources : opt vec Source;
    decimals : opt nat64;
    status : FeedStatus;
    owner : text;
    data : opt AssetDataResult;
};

type CreateCustomFeedRequest = record {
    id : text;
    update_freq : nat;
    feed_type : FeedType;
    decimals : opt nat64;
    sources : vec Source;
    msg : text;
    sig : text;
};

type CreateDefaultFeedRequest = record {
    id : text;
    update_freq : nat;
    decimals : nat;
};


type BalancesCfg = record {
    rpc : text;
    chain_id : nat;
    erc20_contract : text;
    fee_per_byte : nat;
};

type Cfg = record {
    exchange_rate_canister : principal;
    fallback_xrc : principal;
    rpc_wrapper : text;
    mock : bool;
    key_name : text;
    balances_cfg : BalancesCfg;
};

type UpdateCfg = record {
    exchange_rate_canister : opt principal;
    fallback_xrc : opt principal;
    rpc_wrapper : opt text; 
    mock : opt bool;
    key_name : opt text;
    balances_cfg : opt BalancesCfg;
};


type Pagination = record {
    page : nat64;
    size : nat64;
};
// Filter struct used to filter output of get_feeds method
type GetFeedsFilter = record {
    feed_type : opt FeedTypeFilter;
    owner : opt text;
    search : opt text;
};

type FeedTypeFilter = variant { Custom : null; Default : null };

// PaginationResult struct used as a response to request with pagination
type GetFeedsResultWithPagination = record {
    page: nat64;
    size: nat64;
    total_items: nat64;
    total_pages: nat64;
    items: vec Feed;
};


type AssetDataResult = record {
    data: AssetData;
    signature: opt text;
};

type AssetData = variant {
    DefaultPriceFeed: record {
        symbol: text;
        rate: nat64;
        decimals: nat64;
        timestamp: nat64;
    };
    CustomPriceFeed: record {
        symbol: text;
        rate: nat64;
        decimals: nat64;
        timestamp: nat64;
    };
    CustomNumber: record {
        id: text;
        value: nat64;
        decimals: nat64;
    };
    CustomString: record {
        id: text;
        value: text;
    };
};

type GetAssetDataWithProofResponse = variant { Ok : AssetDataResult; Err : text };
type GetAssetDataResponse = variant { Ok : AssetDataResult; Err: text };
type TextResponse = variant { Ok : text; Err: text };
type NatResponse = variant { Ok : nat; Err: text };
type BoolResponse = variant { Ok : bool; Err: text };
type GetCfgResponse = variant { Ok : Cfg; Err: text };
type GetWhitelistResponse = variant { Ok : vec text; Err: text };
type Error = variant { Ok : null; Err : text };


service : {
    // custom feeds
    create_custom_feed : (req : CreateCustomFeedRequest) -> (Error);
    remove_custom_feed : (id : text, msg : text, sig : text) -> (Error);
    
    // default feeds
    create_default_feed : (req : CreateDefaultFeedRequest) -> (Error);
    remove_default_feed : (id : text) -> (Error);

    // assets 
    get_asset_data_with_proof : (id : text) -> (GetAssetDataWithProofResponse);
    get_asset_data : (id : text) -> (GetAssetDataResponse);
    is_feed_exists : (id : text) -> (bool);
    get_feeds : (filter: opt GetFeedsFilter, pagination: opt Pagination) -> (GetFeedsResultWithPagination);
    get_feed : (id: text) -> (opt Feed);
    
    // controllers
    sign_message : (msg : text) -> (TextResponse);
    update_cfg : (cfg : UpdateCfg) -> (Error);
    get_cfg : () -> (GetCfgResponse);
    clear_state : () -> (Error);

    // canister
    eth_address : () -> (TextResponse);

    // balances
    deposit : (tx_hash : text, msg : text, sig : text) -> (Error);
    get_balance : (address : text) -> (NatResponse);
    withdraw : (amount : nat, to : text, msg : text, sig : text) -> (TextResponse);
    withdraw_fees : (to : text) -> (TextResponse);

    // whitelist
    add_to_whitelist : (address : text) -> (Error);
    remove_from_whitelist : (address : text) -> (Error);
    is_whitelisted : (address : text) -> (BoolResponse);
    get_whitelist : () -> (GetWhitelistResponse);
}